package com.acel.streamlivetool.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.acel.streamlivetool.bean.Anchor;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ANCHOR".
*/
public class AnchorDao extends AbstractDao<Anchor, Long> {

    public static final String TABLENAME = "ANCHOR";

    /**
     * Properties of entity Anchor.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Platform = new Property(1, String.class, "platform", false, "PLATFORM");
        public final static Property Nickname = new Property(2, String.class, "nickname", false, "NICKNAME");
        public final static Property ShowId = new Property(3, String.class, "showId", false, "SHOW_ID");
        public final static Property RoomId = new Property(4, String.class, "roomId", false, "ROOM_ID");
        public final static Property OtherParams = new Property(5, String.class, "otherParams", false, "OTHER_PARAMS");
    }


    public AnchorDao(DaoConfig config) {
        super(config);
    }
    
    public AnchorDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ANCHOR\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PLATFORM\" TEXT," + // 1: platform
                "\"NICKNAME\" TEXT," + // 2: nickname
                "\"SHOW_ID\" TEXT," + // 3: showId
                "\"ROOM_ID\" TEXT," + // 4: roomId
                "\"OTHER_PARAMS\" TEXT);"); // 5: otherParams
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ANCHOR\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Anchor entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String platform = entity.getPlatform();
        if (platform != null) {
            stmt.bindString(2, platform);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(3, nickname);
        }
 
        String showId = entity.getShowId();
        if (showId != null) {
            stmt.bindString(4, showId);
        }
 
        String roomId = entity.getRoomId();
        if (roomId != null) {
            stmt.bindString(5, roomId);
        }
 
        String otherParams = entity.getOtherParams();
        if (otherParams != null) {
            stmt.bindString(6, otherParams);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Anchor entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String platform = entity.getPlatform();
        if (platform != null) {
            stmt.bindString(2, platform);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(3, nickname);
        }
 
        String showId = entity.getShowId();
        if (showId != null) {
            stmt.bindString(4, showId);
        }
 
        String roomId = entity.getRoomId();
        if (roomId != null) {
            stmt.bindString(5, roomId);
        }
 
        String otherParams = entity.getOtherParams();
        if (otherParams != null) {
            stmt.bindString(6, otherParams);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Anchor readEntity(Cursor cursor, int offset) {
        Anchor entity = new Anchor( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // platform
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nickname
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // showId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // roomId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // otherParams
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Anchor entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPlatform(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNickname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setShowId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRoomId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOtherParams(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Anchor entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Anchor entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Anchor entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
